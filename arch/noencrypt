#!/usr/bin/env bash

lsblk
read -rp "Name of target drive: /dev/" TARGET_DRIVE
TARGET_DRIVE="/dev/${TARGET_DRIVE}"

read -rp "Computer name: " COMPUTER_NAME
read -rp "Username to create: " USERNAME

while true; do
  read -rsp "Password for ${USERNAME}: " USER_PASSWORD
  echo
  read -rsp "Password for ${USERNAME} (again): " USER_PASSWORD_CONFIRMATION
  echo

  [ -z "${USER_PASSWORD}${USER_PASSWORD_CONFIRMATION}" ] && echo "Password may not be empty" && continue
  [ "${USER_PASSWORD}" = "${USER_PASSWORD_CONFIRMATION}" ] && break
  echo "Passwords entered do not match.  Please try again"
done

EFI_PARTITION="${TARGET_DRIVE}p1"
EFI_PARTITION_UUID=$(uuidgen)
ROOT_PARTITION="${TARGET_DRIVE}p2"
ROOT_PARTITION_UUID=$(uuidgen)

echo "setting up ${TARGET_DRIVE}..."

echo "=== Enable Network Time Protocol ==="
timedatectl set-ntp true

echo "=== Set up partition table with new partitions ==="
sgdisk --zap-all "${TARGET_DRIVE}"
sgdisk -n 0:0:+500MiB -t 0:ef00 -c 0:boot -u 0:"${EFI_PARTITION_UUID}" "${TARGET_DRIVE}"
sgdisk -n 0:0:0 -t 0:8300 -c 0:root -u 0:"${ROOT_PARTITION_UUID}" "${TARGET_DRIVE}"
e2fsck -fy "${ROOT_PARTITION}"

echo "=== Make filesystems on new partitions ==="
mkfs.fat -F 32 "${EFI_PARTITION}"
mkfs.ext4 -qFF "${ROOT_PARTITION}"

echo "=== Mount partitions ==="
mount "${ROOT_PARTITION}" /mnt
mount --mkdir "${EFI_PARTITION}" /mnt/boot

echo "=== Find the 20 most recently updated mirror sites and sort them by download rates ==="
reflector --country ZA,GB,US --latest 20 --sort rate --save /etc/pacman.d/mirrorlist

echo "=== Install base linux packages to mounted root ==="
pacstrap /mnt base \
              linux \
              linux-firmware \
              base-devel \
              linux-headers \
              intel-ucode \
              networkmanager \
              wireless_tools \
              wpa_supplicant

echo "=== Generate fstab from current mounts below /mnt ==="
genfstab -U /mnt > /mnt/etc/fstab

echo "=== Set timezone ==="
ln -sf /mnt/usr/share/zoneinfo/Africa/Johannesburg /mnt/etc/localtime

echo "=== Sync hardware clock to system clock ==="
arch-chroot /mnt hwclock --systohc

echo "=== Set up localization ==="
{
  echo "af_ZA.UTF-8 UTF-8"
  echo "en_ZA.UTF-8 UTF-8"
} > /mnt/etc/locale.gen

arch-chroot /mnt locale-gen

echo "LANG=en_ZA.UTF-8" > /mnt/etc/locale.conf

echo "=== Set up keyboard layout and re-mappings ==="
## Need to do keyboard setup here.

echo "=== Network configuration ==="
echo "${COMPUTER_NAME}" > /mnt/etc/hostname

{
  echo "127.0.0.1   localhost"
  echo "::1         localhost"
  echo "127.0.1.1   ${COMPUTER_NAME}.localdomain    ${COMPUTER_NAME}"
} > /mnt/etc/hosts

arch-chroot /mnt systemctl enable NetworkManager

echo "=== Setup EFI boot manager ==="
arch-chroot /mnt bootctl install

{
  echo "default      arch.conf"
  echo "timeout      1"
  echo "console-mode max"
  echo "editor       no"
} > /mnt/boot/loader/loader.conf

{
  echo "title Arch Linux"
  echo "linux /vmlinuz-linux"
  echo "initrd /intel-ucode.img"
  echo "initrd /initramfs-linux.img"
  echo "options root=PARTUUID=${ROOT_PARTITION_UUID} rw"
} > /mnt/boot/loader/entries/arch.conf

echo "=== Setup sudo rights for members of group wheel ==="
echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/01_wheel

echo "=== Installing more packages ==="
arch-chroot /mnt pacman -Syu

arch-chroot /mnt pacman --noconfirm -S mtools \
                                       dosfstools \
                                       man-db \
                                       man-pages \
                                       sudo \
                                       bash-completion \
                                       git \
                                       sof-firmware \
                                       sof-tools \
                                       openssh \
                                       qtile \
                                       lxappearance \
                                       nitrogen \
                                       thunar \
                                       alacritty \
                                       picom \
                                       lightdm \
                                       lightdm-gtk-greeter

echo "=== Setup user ${USERNAME} ==="
arch-chroot /mnt useradd -m "${USERNAME}" -G wheel,audio,video,optical,storage
echo "Please enter password for ${USERNAME}"
# arch-chroot /mnt passwd "${USERNAME}"

echo "${USERNAME}:${USER_PASSWORD}" | chpasswd -R /mnt

#arch-chroot /mnt bash <<EOF
#  $(declare -p USERNAME USER_PASSWORD)
#  echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
#EOF


echo "=== Generate SSH key pair for ${USERNAME} ==="
arch-chroot /mnt bash <<EOF
  $(declare -p USERNAME)
  cd /home/${USERNAME}
  su ${USERNAME} -c "
    mkdir .ssh || true
    ssh-keygen -t ed25519 -f .ssh/ed25519 -N ''
  "
EOF

echo "=== Installing PARU ==="
arch-chroot /mnt bash <<EOF
  $(declare -p USERNAME)
  cd /home/${USERNAME}
  su ${USERNAME} -c "git clone https://aur.archlinux.org/paru.git"
  cd paru
  sed -n 's/.*depends = //p' .SRCINFO | pacman --noconfirm -S -
  su ${USERNAME} -c "makepkg -s --noconfirm"
  mv ./paru*.pkg.tar.zst paru.pkg.tar.zst
  pacman -U --noconfirm "/home/${USERNAME}/paru/$(ls paru*.pkg.tar.zst)"
  ls *.pkg.tar.zst | xargs -I{} pacman -U --noconfirm /home/${USERNAME}/paru/{}
  rm -fr /home/${USERNAME}/paru
  paru -Syu
  exit
EOF

echo echo "=== Enabling LightDM service ==="
arch-chroot /mnt systemctl enable lightdm.service

echo echo "=== Installing Google Chrome, NeoVim ==="

arch-chroot /mnt paru --noconfirm -S google-chrome \
                                     nvim \
                                     neovim-symlinks \
                                     xclip

echo "Installation Completed.  Press <Enter> to unmount and reboot, or <C-c> to exit this script..."
# shellcheck disable=SC2034
read -r CONTINUE
umount -l /mnt/boot
umount -l /mnt
reboot now
