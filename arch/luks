#!/usr/bin/env bash

lsblk
read -rp "Name of target drive: /dev/" TARGET_DRIVE_NAME
TARGET_DRIVE="/dev/${TARGET_DRIVE_NAME}"

while true; do
  read -rsp "Password for DISK ENCRYPTION: " ENCRYPTION_PASSWORD
  echo
  read -rsp "Password for DISK ENCRYPTION (again): " ENCRYPTION_PASSWORD_CONFIRMATION
  echo

  [ -z "${ENCRYPTION_PASSWORD}${ENCRYPTION_PASSWORD_CONFIRMATION}" ] && echo "Password may not be empty" && continue
  [ "${ENCRYPTION_PASSWORD}" = "${ENCRYPTION_PASSWORD_CONFIRMATION}" ] && break
  echo "Passwords entered do not match.  Please try again"
done

read -rp "Computer name: " COMPUTER_NAME
read -rp "Username to create: " USERNAME
read -rp "User email: " USER_EMAIL

while true; do
  read -rsp "Password for ${USERNAME}: " USER_PASSWORD
  echo
  read -rsp "Password for ${USERNAME} (again): " USER_PASSWORD_CONFIRMATION
  echo

  [ -z "${USER_PASSWORD}${USER_PASSWORD_CONFIRMATION}" ] && echo "Password may not be empty" && continue
  [ "${USER_PASSWORD}" = "${USER_PASSWORD_CONFIRMATION}" ] && break
  echo "Passwords entered do not match.  Please try again"
done

EFI_PARTITION_UUID=$(uuidgen)
ROOT_PARTITION_UUID=$(uuidgen)

if [[ ${TARGET_DRIVE_NAME} == nvme* ]]
then
  EFI_PARTITION="${TARGET_DRIVE}p1"
  ROOT_PARTITION="${TARGET_DRIVE}p2"
else
  EFI_PARTITION="${TARGET_DRIVE}1"
  ROOT_PARTITION="${TARGET_DRIVE}2"
fi

echo "setting up ${TARGET_DRIVE}..."

echo "[[ PRESS <ENTER> TO CONTINUE ]]"
read -r CONTINUE

echo "=== Enable Network Time Protocol ==="
timedatectl set-ntp true

echo "=== Set up partition table with new partitions ==="
wipefs -a "${TARGET_DRIVE}"
sgdisk -n 0:0:+500MiB -t 0:ef00 -c 0:boot -u 0:"${EFI_PARTITION_UUID}" "${TARGET_DRIVE}"
sgdisk -n 0:0:0 -t 0:8300 -c 0:root -u 0:"${ROOT_PARTITION_UUID}" "${TARGET_DRIVE}"
# e2fsck -fy "${ROOT_PARTITION}"

echo "=== Set up encryption on root partition ==="
echo "${ENCRYPTION_PASSWORD}" | cryptsetup -q luksFormat "${ROOT_PARTITION}"
echo "${ENCRYPTION_PASSWORD}" | cryptsetup -q open "${ROOT_PARTITION}" root

echo "=== Make filesystems on new partitions ==="
mkfs.fat -F 32 "${EFI_PARTITION}"
mkfs.ext4 -qFF /dev/mapper/root

echo "=== Mount partitions ==="
mount /dev/mapper/root /mnt
mount --mkdir "${EFI_PARTITION}" /mnt/boot

echo "=== Find the 20 most recently updated mirror sites and sort them by download rates ==="
reflector --country ZA,GB,US --latest 20 --sort rate --save /etc/pacman.d/mirrorlist

echo "=== Ensuring archlinux-keyring up to date ==="
pacman --noconfirm -Sy archlinux-keyring

echo "=== Install base linux packages to mounted root ==="
pacstrap /mnt base \
              linux \
              linux-firmware \
              base-devel \
              linux-headers \
              intel-ucode \
              networkmanager \
              wireless_tools \
              wpa_supplicant

echo "=== Generate fstab from current mounts below /mnt ==="
genfstab -U /mnt > /mnt/etc/fstab

echo "=== Set timezone ==="
arch-chroot /mnt ln -sf /usr/share/zoneinfo/Africa/Johannesburg /etc/localtime

echo "=== Sync hardware clock to system clock ==="
arch-chroot /mnt hwclock --systohc --update-drift

echo "=== Set up localization ==="
{
  echo "af_ZA.UTF-8 UTF-8"
  echo "en_ZA.UTF-8 UTF-8"
} > /mnt/etc/locale.gen

arch-chroot /mnt locale-gen

echo "LANG=en_ZA.UTF-8" > /mnt/etc/locale.conf

echo "=== Key mappings for Apple keyboard ==="
{
  echo "options hid_apple fnmode=2"
  echo "options hid_apple swap_opt_cmd=1"
  echo "options hid_apple iso_layout=0"
} >> /mnt/etc/modprobe.d/hid_apple.conf

echo "=== Swap caps and escape keys (X) ==="
mkdir -p /mnt/etc/X11/xorg.conf.d

cat <<EOF >> /mnt/etc/X11/xorg.conf.d/10-keyboard.conf
Section "InputClass"
    Identifier          "system-keyboard"
    MatchIsKeyboard     "on"
    Option "XkbOptions" "caps:swapescape"
EndSection
EOF

echo "=== Swap caps and escape keys (tty) ==="
mkdir -p /mnt/usr/local/share/kbd/keymaps

{
  echo "keycode 1 = Caps_Lock"
  echo "keycode 58 = Escape"
} >> /mnt/usr/local/share/kbd/keymaps/custom.keymap

{
  echo "KEYMAP=us"
  echo "KEYMAP_TOGGLE=/usr/local/share/kbd/keymaps/custom.keymap"
} >> /mnt/etc/vconsole.conf

echo "=== Network configuration ==="
echo "${COMPUTER_NAME}" > /mnt/etc/hostname

{
  echo "127.0.0.1   localhost"
  echo "::1         localhost"
  echo "127.0.1.1   ${COMPUTER_NAME}.localdomain    ${COMPUTER_NAME}"
} > /mnt/etc/hosts

arch-chroot /mnt systemctl enable NetworkManager

echo "=== Setup EFI boot manager ==="
arch-chroot /mnt bootctl install

{
  echo "default      arch.conf"
  echo "timeout      1"
  echo "console-mode max"
  echo "editor       no"
} > /mnt/boot/loader/loader.conf

{
  echo "title Arch Linux"
  echo "linux /vmlinuz-linux"
  echo "initrd /intel-ucode.img"
  echo "initrd /initramfs-linux.img"
  echo "options cryptdevice=PARTUUID=${ROOT_PARTITION_UUID}:root root=/dev/mapper/root rw"
} > /mnt/boot/loader/entries/arch.conf

echo "=== Setup sudo rights for members of group wheel ==="
echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/01_wheel

echo "=== Temporarily disable password requirement for members of group wheel ==="
echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /mnt/etc/sudoers.d/99_nopwd

echo "=== Installing more packages ==="
arch-chroot /mnt pacman -Syu

arch-chroot /mnt pacman --noconfirm -S mtools \
                                       dosfstools \
                                       man-db \
                                       man-pages \
                                       sudo \
                                       bash-completion \
                                       git \
                                       openssh \
                                       bat \
                                       fish \
                                       starship \
                                       exa \
                                       htop \
                                       acpid \
                                       gnome-keyring \
                                       libsecret \
                                       libgnome-keyring \
                                       usbutils

echo "=== Enabling ACPID ==="
arch-chroot /mnt systemctl enable acpid

echo "=== Installing windowing manager and related packages ==="

arch-chroot /mnt pacman --noconfirm -S qtile \
                                       lxappearance \
                                       thunar \
                                       alacritty \
                                       xterm \
                                       picom \
                                       lightdm \
                                       lightdm-gtk-greeter \
                                       network-manager-applet \
                                       libnotify \
                                       dunst \
                                       volumeicon \
				                               arandr \
				                               xorg-xinput \
				                               imwheel \
				                               rofi

echo "=== Install audio packages ==="

arch-chroot /mnt pacman --noconfirm -S sof-firmware \
                                       sof-tools \
                                       pipewire \
                                       pipewire-alsa \
                                       pipewire-pulse \
                                       wireplumber \
                                       pulsemixer \
                                       alsa-utils \
                                       pavucontrol

echo "=== Install music player ==="

arch-chroot /mnt pacman --noconfirm -S mpd \
                                       mpc \
                                       ncmpcpp


echo "=== Install bluetooth packages =="

arch-chroot /mnt pacman --noconfirm -S bluez \
                                       bluez-utils \
                                       blueman

arch-chroot /mnt systemctl enable bluetooth.service

echo "=== Mounting of USB storage devices ==="

arch-chroot /mnt pacman --noconfirm -S udisks2

echo "=== Setup user ${USERNAME} ==="
arch-chroot /mnt useradd -m "${USERNAME}" -G wheel,audio,video,optical,storage

echo "${USERNAME}:${USER_PASSWORD}" | chpasswd -R /mnt

echo "=== Generate SSH key pair for ${USERNAME} ==="
arch-chroot /mnt bash <<EOF
  $(declare -p USERNAME)
  cd /home/${USERNAME}
  su ${USERNAME} -c "
    mkdir .ssh || true
    ssh-keygen -t ed25519 -f .ssh/id_ed25519 -N '' -C ${USER_EMAIL}
  "
EOF

echo "=== Installing PARU ==="
arch-chroot /mnt bash <<EOF
  $(declare -p USERNAME)
  cd /tmp
  su ${USERNAME} -c "git clone https://aur.archlinux.org/paru.git"
  cd paru
  su ${USERNAME} -c "makepkg -si --noconfirm"
  paru -Syu --noconfirm
EOF

echo "=== Enabling LightDM service ==="

arch-chroot /mnt systemctl enable lightdm.service

echo "=== Installing packages from AUR ==="

arch-chroot /mnt bash <<EOF
  $(declare -p USERNAME)
  cd /home/${USERNAME}
  su ${USERNAME} -c "
    paru --noconfirm -S google-chrome \
                        neovim \
                        neovim-symlinks \
                        xclip \
                        nerd-fonts-jetbrains-mono \
                        xlayoutdisplay \
                        bluetuith
  "
EOF

echo "=== Set up automatic display configuration ==="

cat <<EOF >> /mnt/usr/local/sbin/autoconfigure-screens
#!/bin/sh

export HOME=/home/${USERNAME}
export DISPLAY=:0
export XAUTHORITY=/home/${USERNAME}/.Xauthority

xlayoutdisplay -w 3 >> /tmp/xlayoutdisplay.log 2>&1
EOF

chmod +x /mnt/usr/local/sbin/autoconfigure-screens

cat <<EOF >> /mnt/etc/udev/rules.d/99-autoconfigure-screens.rules
ACTION=="change", SUBSYSTEM=="drm", RUN+="/usr/local/sbin/autoconfigure-screens"
EOF

cat <<EOF >> /mnt/etc/acpi/events/lid
event=button/lid.*
action=/usr/local/sbin/autoconfigure-screens
EOF


echo "=== Re-enable password requirement for SUDO operations for members of group wheel ==="
rm /mnt/etc/sudoers.d/99_nopwd

echo "=== Set up encrypt hook and regenerate initramfs ==="
sed -i 's/ filesystems/ encrypt filesystems/' /mnt/etc/mkinitcpio.conf

arch-chroot /mnt mkinitcpio -P

echo
echo
echo "Installation Completed.  Press <Enter> to unmount and reboot, or <C-c> to exit this script..."
# shellcheck disable=SC2034
read -r CONTINUE
umount -l /mnt/boot
umount -l /mnt
reboot now
